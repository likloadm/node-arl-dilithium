const ArlDilithium = require("../lib/binding.js");
const assert = require("assert");

assert(ArlDilithium, "The expected function is undefined");

function testBasic()
{
    console.log("Generate keys");
    const keys = new Object();
    keys.pub = Buffer.from("0353482822c9fc156fbbaecaf101efb1a3a0db56ed71c4b3e35fbbcd957318de2dd38496ed43c2b89f1d460c45b56856b4b65284fe2766668b0fa20af8dbf97db9ba3a06d723847613f800b9766e4915ca068cdc327bba0247f9360c5d80ffc7f5ed3fb46eb286a66c98651d683f6cb85d178b4d07de86087a1f75263304b4879bac24301323a3357465fcfbd7af90617249d9ab4fb769e168c23eaac0181ffb88da1eb9357bf52d1073fef43af9bb4e132f3498825d2452ecdc4e6e2731e5e8a2dc5e4298931e3ca8c319f7d29de42ba4d3a182d3a0cd014d61bee6b77b589b3ace0c9e8b848b10645a6dabbac85be45499f6440e787d3c2724d19e29e969113fb2cc6fd3900f0e99e913b12e66346bb20f604d0a56c5e37a5e55ce199addba556bcb83dac1a0ef3ee2e501224ec2d3fef8416aad17dfc2865f7374a7b005bd2a65e3377dfd306b1eb1f6176d12c9ac8898772bccdb1e91285d5a610769e41faf13aa1def34bc5b341c2411d830ba5210bb78eb07d9dd3e4944ba8a517bb31c3e3bc077dceda61e2a1e81535d6708531ac80f563e6e89140e33560e70c2bc8f8ae0517eb4772de15d840c0bb79eb700839df3e263b952adfd188bafb5ffc4f75b885a3d64d8927dddf3ae914a0be51a719807aefc727858cd9fdaedaa6c0cef14ff3dc00a4d18090ff2a68b93d3ccd2f0b2bf62ad366095c1dedd4db318c372237fdf8ebd6c5aa36dfd362b9566ba1a9074607f3c9d6ac55b3c5a93ae697b301fd02a0529292dbcba450fd53e21673d7b6d60cfcf6011682c749a6d9b4b7b6c8dea2f8492be0a775e22f1543801512d20c006167550e8444fa487d28d8fb421c5ff50e154d15971904fdc798a490fc84b745483b5cdb4f3f7769b292167323563cb5aa2d2c3456c97551ca1c5d4316d652eb0f9059d95f51e296ecbb8c83d1da998377520de2940b736d88e5bd12c1cec4d3a136590c80c615b2855bba1d0e8ff992f5da986c0ddea0a827d80fc7cb5e5526352df1e3d422001e0058290db8d4845dc2134e6d266910c0297b83755f8665f7e4de43a134a73b733810482f4935ae0c1a42fc999b70e3d07b6065c53c3f887dff3fd61383f17e4b41c9189771df4ec0b337a89dfe4fed7d43ef2b95f93eb4e2bcb4ae32bdffb0831b066b7fc96c9e9fdad465e42ab21f3ba93e434faa150b0cf4e9f8c51ed7c67f17c8aa4c616865bcc3c9a7ab1e49a5ea97e259fb4b3ea61a7fe2a03900dca147c7d3d79e607b3f298a9728a8af482f55cc7b0886f6c39db3abc037876a41f3076fdc3f07a6f11a3c49e80c42c4b58437923ebc30b010292b5372ff719accbcd3c1d65b8b16acc5e7c301cfbff7562e22ec8c153debc26fba19788f98f1cbdc27c56f84f97dbd87d0138091c2de6bc89725dcea47fa9e4a6e3d5d3e0a2cdb118bb6be66603f2600abb75f1e6034e31b8d110e38cbff73f6bffe7419268400fc67bbf8ae3dc285a2c3de4656ce41833348d22a51cdf960bb00b7eeac3da2d0d081d4b15b8678d3433352cbcc3163a19bae0e86f01d632ac2c4eaa9462d1ba1062fc4430cbb1e1631b0f5ec24fe7870676a058125709618b82fa4dc6dc6f72faf2625c01ebc425729d25c2dcacf69aeb47d5ba345961a1901c1f2b8d1a69fa8df86c42247c64c47c7fbb2075cf2dd4ad871d2de4257b2297b5fec9623302ae12eb91eb4a0d93a22f8201981047ccab6f60eeb0a006232bf2528435e556901992fffa0ff8409cc2e3b7fe52f28a63f8abc8033bdd075e9763059d854ecc6d2f48d5f88e862fa65a0464126c4b6aee42d5ab75ab1a389dc5093b7516e6b1be33a63db7aee6eb4f6226b41833ee205c1ac0f05d939f2624e44149bceb689876c0f2b004e7efa307f5c6d4ecae82252fcd0077756ee00693a4866f6273ee5ef25f56a1e7f4094cc0f2d3c0e4bf18ad0421e48728202277f3e54f461734b8d0d93cf5d412c6cc1ee0c582bf90dfcb7b42bf103c40c15ef444ffad80f6528ca4d43b3ef649c6342c3d0fd857fba1644ec33bb832dd86d9a3fba6f216a37f68108d6587b6e1fc6f6853dba1e6bcf6bd244634d7861db159e0040abe34c6de7493f49083588a4b70b154ec2dc656e77d66f94bc0f420d67b24e7290563fa1cee375e8b31caa39fa210a55f215730504338f63005e647a3fa50c5e5b4e2592ee770b97ed844e4073f9a955c9ab8afe12f72293267a8508ffb16998111efb1039eceb8b2910f6bb8de4b97b8212769499ad6ee8fda39168977a9000f84f20d000e17b2c7c0f740e005d04e9e7bfe89563ed6bd9987f5674157861d6a37bc393fb05cd657cfbb8ecc54294ba1cfe8fc472d407717c3e3e5b978d5fbd3cad97ae6309dad737ceca3376af0efebfaa2fb9bca6b25b27fdb4c8affa3270059c73e7d24e30fc518f58311df84493cb6c270845704a900f08816cdb042aab93984e5ef917651122dcc52a90b1f0b5582db2dcf29a75dbece593e43918069cc1d43eca4692a72468b4d9039a70d0ddb5b66781bb2077c4943a0759639c3088374246467c5eeca4122c5bbee5401fbe63058d5b9f466297b7516020105d882cd98c4f346ffa0696ee51d45f9941d42cf56340765091c9e689652dadc0b32e9c955a630306dc450ef0d6f7b8e9b09abc378e9dc8d3f2e2c8d911df0d6aa748a6efe165af2a5106a75306c38e237dd07aefe5767a831ef11edfe9e99acbe54d285e30ef424afb7e7e1df601aea43dd8c28","hex");
    keys.priv = Buffer.from("0353482822c9fc156fbbaecaf101efb1a3a0db56ed71c4b3e35fbbcd957318de291cb63cf5753d3029661427395976f09d54a465be7d4e23a78b42d73f4bed5adfe017c0ba8abda24ea225d06afc94cec562012ef5f8f44610a4ea40919ea12bee92585e75fd27d4258652e0b80e22a38af9798ac93381a6caf37a5af219e0c566a992b5bb838fb385b22fddc24fd0ef5c9a14162bb2108e39bbcd34d59b564b049a1a9ff7efffeb18475f2a83748530eeb3a1042520e6d4f22eb6f6a61110214e4f2cf65db803a077ee66c48daade5f19b999aa3f8bf51b8973aa3102143db2d48c67173cd77b40696e5a8cccb6057f43e1b520d3605526548e876f49f2857f5fa63bbc7b482dfbd79d48cf710eea1e820a910cb691e08c8b26f9ce0bcb69173bb666b7ffe342b4b9ad793b7ad632a0260037389304d6eb92c649d378bd4e5c56efc2dbaf0af67ddb18995269a1602ae8f9e0c4dfcfab2f158751b592bce6d0981ed1c3807b5ce2b83d8b5c48a3fdcaf4af2c1cbae3b355d8f135e328c3df6a9e67fc109fa76e7a18da0de743b20d6ee2a4a28296a407351ea436467a4651794881dc50a555960b1bb3180d61a76e41b1baa004a6d9b5580c40db65ab3bd3bc0628081691d957e50c4fc09733b8b319cd393cfeb37e94b712169bf0ec8609334c9753ad4f432c2345dd63210b84335de4175205c2db74c95d449c7267aa2742dfd10673a47577f20963a1cbee37d31b33124601c8a97413db1f330edca08912490abdf9031e5ba7b00f4dfab7aa16af626bb3c8c3d42c70c618e0c68a8c5edeac14a486ded8b4d22a00efcc289079ee621b1a9ab3bfc6b7fb3950547bab330b226caa96f3c4010405ff7d295777f3612c620c7f834eb802ffff49fb3a69d127fbe71f619a6b151be892410426f7eee83a0d4245504183f7cad186296f8c3e1f372764d2e5e9fdce242bbbefb648a968fa32a5cc12a8259289ba85d36dcb849cdf144e568de152496c9c691de3c6e6457b251e18205678948c576dc91e0a4e8a3ed154ea00c07c2cc4e3b32f4e430f788026dfd7c60f3d8de6cdbedd638585a16cd742d65a0e68a51b0e3b84c3475484195d3e754c968020fe948f255eb97ff99fb49a5bdbe7cac3a24c3995b7d8f02833b329722774f8be053f94083d6f4e345671192fce5118c42ad96c1adf49e76f4b477267ef1ef4f1a1c3f9ea5ad6b69e8e8c6d86e1c58590f269a972847ea7a67f5cbc8f5b790fa3b693c9a648c3372f165160dda720fdf347355f9ba747b9e39e06e1b9fed842af627b5be2c97cc5f9d6709df3497eb1c7dfedeb255e5c1c0463d5239d3804556fc89d292b5442761f274aa4fbcee3872a46513a7baaf4f1e505b9de5cd9325cd557fb1e5bdb2afc9869e618f82cd4fbed3e13b1592e71fe0183a6cdcb43f434901f756a96baaa3477b129bfbbade35e837bfc3c71dfc5684cbb067e6ff636a8f98b9933fc1106992b879a28be7245273d31a52d2f19a1a4ff74765b664acaf93907bf61bcd36bd78aecb1c00625ef43d86e3d21e70ccefd7245ea5d37b5864295be4c6de099b4a4ed549f5956ddbf9973aaefa2af982a8d6de7617cdfa24ec9e400f1b477000cc2654a5dfa1f75466582516888b0250d8f24eeeb46acd8503d15fafc3e0f0c1c7d502e0c72ce823e78214eb6cf52de6212cbac00761604958f495c8e6878f316733a05a72ab222b0dcb2c5ca7f1e24ed2084b5c110fb877faba7cca1a0f9f099fcee370dc1bb33bb152e17f22da92282327bb2e247aece5baf0d42da9d38e2bbf5b796ce727ccb5adffd471713b14616d0b3c8df45f98e0a61aa159b6c00b8dbe174e5abea7db9e776f532bbc8bfc17d491163e0b039fd98e0c5a9b037cb1e700e1ec957378c27d58f61f0b1df4a700f9c1d80ca716f5fe08f6b133f003e299e0437454ce129848cc4071afb7056b23ae320251ecd092510c4277f65a5dcb9e466f79da59583499aaa342201e45b8fa92852229463785bcc900b34bbcc8174c762bc7f91ae7af3af559546c92798e6624156a7851ab1155a913065bd9a08303a2b6c3fc63b59ad56c05a8bdd0c8b4c8ffdc2ec8163528f28a558fdb869b74ebba3aa2d1cfffbfcc0908130a2712f667a34776bacadd82e17fadd505d3e8e30e013bf8460e9e69c9d3104543619824010cba2c83024b5bd78e5380cd6de0b26844b15d14e84f7644678a85147885b00e402384474d342ff40826dcd3c08087ecb82f1bd26b2c98506c0ecc0b9bc3d82c979858ea8db5c23e7d204c2d2b253f4e7ba3971b96d9c42450545c6502821a1a869a2858aac45fc810e698b8442a10a770380522d0d3e6fc6503aed5ae8ae0bd915796a8b4ebe55d54a7b655c3dc903127e4bcb4b6eecfe5a0e28a7e513c87e57a8b6ad11c39589914bf3b76102a884a2e67b18d72858a3ebe5d6fb036578eb3e4e14762e0b097176efe3aaa83d8057fd3478a8733885f380c4104299446d539446ceb5a23c04dd565388543bed712cf149780e9dfd1ab4ec640287362646995c4f6c097898c81a4bfb92c852bf0c351cf4045f07d07a38d8f96c6914c8184a2fdaa20a87096e4ee0968eaa4aae17708f6a358a2dcbf454eae9a2062da7c95bf8b58aa7fbe51f05a8f624a9f96021fcf66b8359301281b5dde42f2493b496fa5f06d7c40e566df1aef8b39f04cb58a9600d0ca9a56aa6678ce192bf0c945928e270724724bff018f14a5a37a7b330c996410eff36adadbc4e8bd6318bed6fafbfbffb0d6a4ebd69f828d4053fe673c1a3cc5d6f37679428d95b1188444176e0589140c42acc410892b9a85ad11a90d6791ea2eda7eab9df7d84c7f6e1745fccc84ec5c20124ca7368b1ed20154cf5eba759b0ab7160186f6cd79a40f62846fa49084ee90b33cb2d76bb25b7193fb58c057016af4a6c9f8ef9afb289068cbb2ac804e74d7be663410df74cdf1024c14900b2c690eba08b0e5175bd94aa31bcd536aa570938573cab3eea0ec82a92585df7d91af9d0976ce78810d8832964b2a0e2265918c6df4e04a0a1b7db14b8eca2e2da96af63bd6ffd073f0eaab08f7a7e197617853e26ee6e1a66ed76dc91fabec9a7ff369e307754430603696b48328a4a26e99b73f408b719f09576d6e82e448d9324d31c1a6edb578c19c659e5687925a4ab8be3a7d5f9e45eb16c5c8e52a6e777277ab36cfa535d3fb5658dd3206ff4366b0dbf5549aa6fe5555bf263b0bae80f022fbfc25289fc6d9713b46918a2b52e3f2647b8a378b695c6af197494955fb93f656e79985824f3d4566e0c6c3a1260ad0b66ce4c0c7f7b2a498fae225f7b0d96b70c435e2fe87ea8a0973074e6cb4bf3b5f10ef70dc6bf7106ce0c4f68af24c3dbb6498f72481fd39d8f536e346a63fc6a2afff204751873bf13eccd42564d66398fdf2d6c7f3fb41133ce4635e9ffb08b4299f944d8dbb81a9eac9ce550344a44e859dd5ff71b04ca5c8c2a728dd066af215a841dac64184b2a394145821c7846b362001c474f512e42b063d377e57319fd3650ac71354fd24ff35f3908b17469f0a0426d108700714b8e10632cd2d330bd6fbc143b122a25df3925a192f54ca241b822973b0eddf438d165026c194f7e47e2046828fd46da7a00460284","hex");
    const result =  ArlDilithium.generateKeypair(Buffer.from("59a59722c699b0081deb84da95553786d79467433de68b751e3124573791304f","hex"));
    console.log("==== PUB KEY ====");
    console.log(result.pub.toString("hex"));
    console.log("==== PRIV KEY ====");
    console.log(result.priv.toString("hex"));
    assert.deepEqual(result, keys, "Unexpected value returned");
    
    console.log("==== PRIV TO PUB ====");
    const result2 = ArlDilithium.privToPub(result.priv);
    console.log(result2.toString("hex"));
    assert.deepEqual(result2, result.pub, "Unexpected value returned");

    console.log("==== SIGNATURE ====");
    const msg = Buffer.from("MESSAGE");
    const sig = ArlDilithium.sign(result.priv,msg);
    console.log(sig.toString("hex"));

    console.log("==== VERIFY ====");
    const ver = ArlDilithium.verify(result.pub, msg, sig);
    console.log(ver);
    assert.deepEqual(true,ver,"Unexpected value returned");

    console.log("==== VERIFY BAD MESSAGE ====");
    const ver1 = ArlDilithium.verify(result.pub, Buffer.from("BAD MESSAGE"), sig);
    console.log(ver1);
    assert.deepEqual(false,ver1,"Unexpected value returned");

    const result_random =  ArlDilithium.generateKeypairRandom();
    console.log("==== RANDOM PUB KEY ====");
    console.log(result_random.pub.toString("hex"));
    console.log("==== RANDOM PRIV KEY ====");
    console.log(result_random.priv.toString("hex"));

    const sig2 = ArlDilithium.sign(result_random.priv,msg);
    console.log("==== VERIFY BAD SIG ====");
    const ver2 = ArlDilithium.verify(result.pub, msg, sig2);
    console.log(ver2);
    assert.deepEqual(false,ver2,"Unexpected value returned");

    console.log("==== VERIFY BAD PUB ====");
    const ver3 = ArlDilithium.verify(result_random.pub, msg, sig);
    console.log(ver3);
    assert.deepEqual(false,ver3,"Unexpected value returned");

}

assert.doesNotThrow(testBasic, undefined, "testBasic threw an expection");

console.log("Tests passed- everything looks OK!");